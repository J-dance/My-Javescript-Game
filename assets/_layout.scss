@import "_variables.scss";

body {
  margin: 0px;
  padding: 0px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  background-image: url(./space.jpg);
  background-size: cover;
}

// Main game heading
.title-section {
  width: 100vw;
  height: 25vh;
}

//  viewport for game content: includes main-grid, lives, timer, level
.game-window {
  display: grid;
  grid-template-columns: 1fr 1fr 400px 1fr 1fr;
  grid-template-rows: 1fr 1fr 400px 1fr 1fr;
  border: 15px double $colour-green;
  background: rgba($color: #ccc, $alpha: 0.25);
  box-shadow: 0 0 30px #ccc;
  width: 60vw;
  height: 70vh;
}

#instructionsContainer {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background: $colour-black;
  padding: 20px;
  border-top: 5px solid $colour-green;
  border-bottom: 5px solid $colour-green;
  // position
  grid-row-start: 3;
  grid-row-end: 4;
  grid-column-start: 1;
  grid-column-end: 6;
}

// main grid for game
// fix dimension so always square
.main-grid {
  // background: rgba($color: #c0b9b9, $alpha: 1.0);
  height: 400px;
  width: 400px;
  // border: 1px solid black;

  // position in main grid
  grid-column-start: 3;
  grid-column-end: 4;
  grid-row-start: 3;
  grid-row-end: 4;

  // display a grid
  display: grid;
}

// main-grid layout grid-size classes
// 1.
.grid-5x5 {
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr 1fr 1fr;
}

// 2.
.grid-6x6 {
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;
}

// 3.
.grid-8x8 {
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
}

// standard square grid tile
.tile {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  background: rgba($color: white, $alpha: 0.7);
  border: 1px solid black;
  box-shadow: 0 0 20px #ccc;
}

// add class for bad tiles
.bad {
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  width: 100%;
  background: rgba($color: #5c5b5b, $alpha: 1.0);
  border: 1px solid black;
  box-shadow: 0 0 1px #ccc;
  z-index: 10;
}

// turn tile invisible
.invisible {
  display: none !important;
}

// player container
.player {
  position: absolute;
  background: rgba($color: #c74949, $alpha: 1);
  border: 1px solid black;
  border-radius: 50%;
  height: 80%;
  width: 80%;
  z-index: 20;
}

// player image classes to add facial features
// 1. tired eyes as default
.tiredEyes {
  background-image: url(./pixel-tired-eyes.png);
  background-position: center;
  background-size: cover;
}

// 2. wide eyes for surprises
.bigEyes {
  background-image: url(./pixel-eyes.png);
  background-position: center;
  background-size: cover;
}

// 3. closed/sleeping eyes for completeion of level
.sleepEyes {
  background-image: url(./pixel-sleep-eyes.png);
  background-position: center;
  background-size: cover;
}

// swirl image for background of bad tile which player steps on
.swirl {
  background-image: url(./swirl.png);
  background-size: cover;
//   background: orange;
}

// bed image as finish
.finish {
  background-image: url(./pixel-bed.png);
  background-size: 90%;
  background-position: center;
  background-repeat: no-repeat;
  height: 100%;
  width: 100%;
}

// class for lives, level and moves display above main-grid
.gameInfo {
  display: flex;
  align-items: center;
}

// lives counter container
#livesCounter {
  justify-content: flex-end;
  // position in main grid
  grid-column-start: 3;
  grid-column-end: 5;
  grid-row-start: 2;
  grid-row-end: 3;
}

// level display 
#levelDisplay {
  // position in main grid
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 2;
  grid-row-end: 3;
}

// moves counter
#movesCounter {
  justify-content: center;
  grid-column-start: 3;
  grid-column-end: 4;
  grid-row-start: 1;
  grid-row-end: 2;
}

// footer at bottom of page (empty)
.footer {
  height: 5vh;
  width: 100vw;
}

// container for the buttons in game
#startContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;

   // position
   grid-row-start: 3;
   grid-row-end: 4;
   grid-column-start: 3;
   grid-column-end: 4;
}

// animations 

// player death animation: spin and get smaller
@keyframes spinning {
  0% {
    transform: rotate( 0deg ) scale( 1 );
  }
  10% {
    transform: rotate( 15deg ) scale( 0.8 );
  }
  50% {
    transform: rotate( -180deg ) scale( 0.5 );
  }
  80%,100% {
    transform: rotate( -360deg ) scale( 0.2 );
  }
};

// player finish animation: translates left and up on screen whilst slightly rotating
@keyframes sleeping {
  0% {
    transform: rotate( 0deg ) scale( 1 ); left: 2px; top: 0px;
  }
  25% {
    transform: rotate( 18deg ) scale( 0.8 ); left: 5px; top: -4px;
  }
  50% {
    transform: rotate( 30deg ) scale( 0.6 ); left: 10px; top: -8px;
  }
  80%,100% {
    transform: rotate( 40deg ) scale( 0.4 ); left: 15px; top: -12px;
  }
};

@keyframes sliding {
  0% {
    margin-left: 0px;
  }
  25% {
    margin-left: 25%;
  }
  50% {
    margin-left: 50%;
  }
  80% {
    margin-left: 75%;
  }
  100% {
    margin-left: 100%;
  }
};

// transform: translate(-100%, 0);
  // transition: transform 1s linear;

// this is the spinning class to add to player
.spin {
  position: relative;
  animation-name: spinning;
  animation-duration: 2s;
  animation-iteration-count: 1;
  animation-timing-function: linear;
}

// this is the sleeping class to add to player 
.sleep {
  // position: relative;
  animation-name: sleeping;
  animation-duration: 2s;
  animation-iteration-count: 1;
  animation-timing-function: linear;
  left: 0px;
  top: 0px;
}

// game over message banner
.gameOver {
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba($colour-purple, 0.8);
  border: 5px solid $colour-red;
  border-radius: $radiusButton;
  box-shadow: 0 0 30px #ccc;
  height: 25%;
  width: 100%;
}

.marginSlide {
  position: relative;
  animation-name: sliding;
  animation-duration: 1s;
  animation-iteration-count: 1;
  animation-timing-function: linear;
}
